
// CDN 
// CDN主要用来存放静态资源(比如 css js 图片 ) 非静态资源一般是指(jsp asp这类后端渲染的页面) 
// 当用户访问量大 带宽小时会优先选择就近的机房进行数据请求 CDN的两个主要特点 缓存 回源
// 缓存是指把资源copy一份到cdn服务器  回源是值当cdn发现自己没有这个资源的时候 会继续向上层根服务器索要资源

// DOM操作 
// 首先创建DOM 添加进页面 每一个DOM都有上都有近两百个自带属性和事件 一些没有用到的属性渲染至浏览器不可避免的会有性能消耗 而虚拟DOM采用一个js对象去描述DOM节点 所以他比创建一个dom的代价小的多
// 更新或者删除时比较两个虚拟JS DOM树的差异 
// vdom的实现主要参考snabbdom类库 (依次从style，props，eventlistener，dataset， class， attributes)进行优化
// DOM的操作会引发重绘||回流
// 事件委托 DOM Fragment 
// 减少回流和重绘 回流：位置 宽高 显示隐藏  重绘 背景颜色 字体颜色 不需要计算几何属性的值改变 现代浏览器重绘和回流已经智能列队更新
// 减少办法 1 避免逐条改变css的样式  应通过一个class同意修改 减少多次请求
// 在一些特定场景可以先display：none隐藏需要操作的dom 设置完所有样式后再block 这样在隐藏期间就不会触发多次重绘与回流

// webpack
// 构建速度： Happypack
// 体积优化 Tree-Shaking

// 图片相关 --引自 高性能网站建设指南
// 计算机色彩基础 像素用二进制表示 二进制的位数越多可以表示的颜色种类越多 成像的效果就越来约细致 相应的文件体积就越大
// 图片的几种格式 
// jpg 有损压缩 应用场景一般为大背景 轮播图
// png 无损压缩 体积大 质量高 支持透明 小图片 小logo应用较多
// svg 文本文件 体积小 不失真 兼容性好 个人使用较少
// base64 文本文件 小图标的解决方案 会加大文件体积 需要控制一定范围 一般10kb
// WebP 比较全能各种优点 细节丰富 支持透明 也可以展示动态图 体积小 兼容性不好 不过提供兼容性的写法 .jpg.webp 如果支持webp优先引用webp资源
// 列入 <img src="//img.alicdn.com/tps/i4/TB1CKSgIpXXXXccXXXX07tlTXXX-200-200.png_60x60.jpg_.webp" alt="demo" class="app-icon">
// 首屏图片懒加载 

// Vue优化 
// 1异步路由懒加载 2基础类库CDN 3体积压缩 4骨架屏 5ssr服务端渲染 预渲染(区别在于服务器渲染要考虑高并发 缓存 预渲染大部分由前端可实现)11 
// 

// 代码方面优化 => 1 v-if v-show 2防抖 节流 3展示性内容使用Object.freeze()冻结对象 4变量缓存减少页面dom的反复渲染更新 5虚拟滚动 只生成当前视口所需的dom 对象反复利用
// 6IntersectionObserver特定视口懒加载 7图片懒加载 8事件销毁
// 